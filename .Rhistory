A <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice de transition d'état
H <- matrix(c(1, 0, 0, 1), nrow = n_states)
# Matrice d'observation
Q <- diag(n_states) * 0.01
# Covariance du bruit de processus
R <- diag(n_states) * 0.1
# Covariance du bruit de mesure
P <- diag(n_states) * 1.0
# Covariance de l'erreur initiale
x <- matrix(0, nrow = n_states)
kalman_filter <- function(A, H, Q, R, P, x, z) {
# A: Matrice de transition d'état
# H: Matrice d'observation
# Q: Covariance du bruit de processus
# R: Covariance du bruit de mesure
# P: Matrice de covariance de l'erreur
# x: Estimation de l'état
# z: Mesures (observations)
# Prédiction
x_pred <- A %*% x
P_pred <- A %*% P %*% t(A) + Q
# Mise à jour
K <- P_pred %*% t(H) %*% solve(H %*% P_pred %*% t(H) + R)
x_new <- x_pred + K %*% (z - H %*% x_pred)
P_new <- (diag(nrow(A)) - K %*% H) %*% P_pred
list(x_new = x_new, P_new = P_new, K = K)
}
# Prédiction
x_pred <- A %*% x
P_pred <- A %*% P %*% t(A) + Q
# Mise à jour
K <- P_pred %*% t(H) %*% solve(H %*% P_pred %*% t(H) + R)
x_new <- x_pred + K %*% (z - H %*% x_pred)
P_new <- (diag(nrow(A)) - K %*% H) %*% P_pred
# Installer et charger les packages nécessaires
install.packages("readr")
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
# Lire les données
data <- read_csv("path_to_your_dataset/creditcard.csv")
# Lire les données
data <- read_csv("C:/Users/AFC/Downloads/cours ENSPD 2024/KalmanFilter/fraudTest.csv")
# Aperçu des données
head(data)
n_states <- 2 A <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice de transition H <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice d'observation Q <- diag(n_states) * 0.01 # Covariance du bruit de processus R <- diag(n_states) * 0.1 # Covariance du bruit de mesure P <- diag(n_states) * 1.0 # Covariance de l'erreur initiale x <- matrix(0, nrow = n_states) # État initial
n_states <- 2 A <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice de transition
n_states <- 2
A <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice de transition
H <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice d'observation
Q <- diag(n_states) * 0.01 # Covariance du bruit de processus
R <- diag(n_states) * 0.1 # Covariance du bruit de mesure
P <- diag(n_states) * 1.0 # Covariance de l'erreur initiale
x <- matrix(0, nrow = n_states) # État initial
# Prédiction x_pred <- A %*% x
P_pred <- A %*% P %*% t(A) + Q # Mise à jour
K <- P_pred %*% t(H) %*% solve(H %*% P_pred %*% t(H) + R)
x_new <- x_pred + K %*% (z - H %*% x_pred)
# Séparer les données en transactions normales et frauduleuses
transactions_normal <- data %>% filter(is_fraud == 0)
transactions_fraud <- data %>% filter(is_fraud == 1)
# Paramètres du filtre de Kalman
n_states <- 2
A <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice de transition d'état
H <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice d'observation
Q <- diag(n_states) * 0.01 # Covariance du bruit de processus
R <- diag(n_states) * 0.1  # Covariance du bruit de mesure
P <- diag(n_states) * 1.0  # Covariance de l'erreur initiale
x <- matrix(0, nrow = n_states) # État initial
# Appliquer le filtre de Kalman sur les données
results <- list()
for (i in 1:nrow(data)) {
z <- as.matrix(data[i, c("Amount", "Time")])
result <- kalman_filter(A, H, Q, R, P, x, z)
x <- result$x_new
P <- result$P_new
results[[i]] <- result
}
# Paramètres du filtre de Kalman
n_states <- 2
A <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice de transition d'état
H <- matrix(c(1, 0, 0, 1), nrow = n_states) # Matrice d'observation
Q <- diag(n_states) * 0.01 # Covariance du bruit de processus
R <- diag(n_states) * 0.1  # Covariance du bruit de mesure
P <- diag(n_states) * 1.0  # Covariance de l'erreur initiale
x <- matrix(0, nrow = n_states) # État initial
# Appliquer le filtre de Kalman sur les données
results <- list()
for (i in 1:nrow(data)) {
z <- as.matrix(data[i, c("Amount", "Time")])
result <- kalman_filter(A, H, Q, R, P, x, z)
x <- result$x_new
P <- result$P_new
results[[i]] <- result
}
# Appliquer le filtre de Kalman sur les données
results <- list()
for (i in 1:nrow(data)) {
z <- as.matrix(data[i, c("amt", "trans_time")])
result <- kalman_filter(A, H, Q, R, P, x, z)
x <- result$x_new
P <- result$P_new
results[[i]] <- result
}
help(data)
library(stats)
?KalmanLike
lire_matrice_etat <- function() {
# Demander le nombre d'états
nb_etats <- as.integer(readline(prompt = "Entrez le nombre d'états dans le système: "))
# Lire les noms des états
noms_etats <- character(nb_etats)
for (i in 1:nb_etats) {
noms_etats[i] <- readline(prompt = paste("Entrez le nom de l'état", i, ": "))
}
# Lire la dimension des états
repeat {
dimensions <- integer(nb_etats)
for (i in 1:nb_etats) {
dimensions[i] <- as.integer(readline(prompt = paste("Entrez la dimension de l'état", noms_etats[i], ": ")))
}
# Vérifier si toutes les dimensions sont égales
if (length(unique(dimensions)) == 1) {
dimension_etat <- dimensions[1]
break
} else {
cat("Les dimensions de tous les états doivent être les mêmes. Veuillez réessayer.\n")
}
}
# Lire les valeurs pour chaque état
matrice_etat <- matrix(NA, nb_etats, dimension_etat)
for (i in 1:nb_etats) {
cat(paste("Entrez les valeurs de l'état", noms_etats[i], "séparées par des espaces:\n"))
valeurs <- as.numeric(unlist(strsplit(readline(), " ")))
while (length(valeurs) != dimension_etat) {
cat("Le nombre de valeurs doit correspondre à la dimension de l'état. Veuillez réessayer.\n")
valeurs <- as.numeric(unlist(strsplit(readline(), " ")))
}
matrice_etat[i, ] <- valeurs
}
matrice_etat
}
# Demander le nombre d'états
nb_etats <- as.integer(readline(prompt = "Entrez le nombre d'états dans le système: "))
# Lire les noms des états
noms_etats <- character(nb_etats)
for (i in 1:nb_etats) {
noms_etats[i] <- readline(prompt = paste("Entrez le nom de l'état", i, ": "))
}
dimensions <- integer(nb_etats)
# Lire la dimension des états
repeat {
dimensions <- integer(nb_etats)
for (i in 1:nb_etats) {
dimensions[i] <- as.integer(readline(prompt = paste("Entrez la dimension de l'état", noms_etats[i], ": ")))
}
# Vérifier si toutes les dimensions sont égales
if (length(unique(dimensions)) == 1) {
dimension_etat <- dimensions[1]
break
} else {
cat("Les dimensions de tous les états doivent être les mêmes. Veuillez réessayer.\n")
}
}
matrice_etat[i, ] <- valeurs
valeurs <- as.numeric(unlist(strsplit(readline(), " ")))
# Demander le nombre d'états
nb_etats <- as.integer(readline(prompt = "Entrez le nombre d'états dans le système: "))
nb_etats <- as.integer(readline(prompt = "Entrez le nombre d'états dans le système: "))
lire_matrice_etat <- function() {
# Demander le nombre d'états
nb_etats <- as.integer(readline(prompt = "Entrez le nombre d'états dans le système: "))
# Lire les noms des états
noms_etats <- character(nb_etats)
for (i in 1:nb_etats) {
noms_etats[i] <- readline(prompt = paste("Entrez le nom de l'état", i, ": "))
}
# Lire la dimension des états
repeat {
dimensions <- integer(nb_etats)
for (i in 1:nb_etats) {
dimensions[i] <- as.integer(readline(prompt = paste("Entrez la dimension de l'état", noms_etats[i], ": ")))
}
# Vérifier si toutes les dimensions sont égales
if (length(unique(dimensions)) == 1) {
dimension_etat <- dimensions[1]
break
} else {
cat("Les dimensions de tous les états doivent être les mêmes. Veuillez réessayer.\n")
}
}
# Lire les valeurs pour chaque état
matrice_etat <- matrix(NA, nb_etats, dimension_etat)
for (i in 1:nb_etats) {
cat(paste("Entrez les valeurs de l'état", noms_etats[i], "séparées par des espaces:\n"))
valeurs <- as.numeric(unlist(strsplit(readline(), " ")))
while (length(valeurs) != dimension_etat) {
cat("Le nombre de valeurs doit correspondre à la dimension de l'état. Veuillez réessayer.\n")
valeurs <- as.numeric(unlist(strsplit(readline(), " ")))
}
matrice_etat[i, ] <- valeurs
}
matrice_etat
}
# Demander le nombre d'états
nb_etats <- as.integer(readline(prompt = "Entrez le nombre d'états dans le système: "))
# Lire les noms des états
noms_etats <- character(nb_etats)
for (i in 1:nb_etats) {
noms_etats[i] <- readline(prompt = paste("Entrez le nom de l'état", i, ": "))
}
# Lire la dimension des états
repeat {
dimensions <- integer(nb_etats)
for (i in 1:nb_etats) {
dimensions[i] <- as.integer(readline(prompt = paste("Entrez la dimension de l'état", noms_etats[i], ": ")))
}
# Vérifier si toutes les dimensions sont égales
if (length(unique(dimensions)) == 1) {
dimension_etat <- dimensions[1]
break
} else {
cat("Les dimensions de tous les états doivent être les mêmes. Veuillez réessayer.\n")
}
}
# Lire les valeurs pour chaque état
matrice_etat <- matrix(NA, nb_etats, dimension_etat)
for (i in 1:nb_etats) {
cat(paste("Entrez les valeurs de l'état", noms_etats[i], "séparées par des espaces:\n"))
valeurs <- as.numeric(unlist(strsplit(readline(), " ")))
while (length(valeurs) != dimension_etat) {
cat("Le nombre de valeurs doit correspondre à la dimension de l'état. Veuillez réessayer.\n")
valeurs <- as.numeric(unlist(strsplit(readline(), " ")))
}
matrice_etat[i, ] <- valeurs
}
matrice_etat[i, ] <- valeurs
matrice_etat
lire_matrice_controle <- function(nb_etats) {
repeat {
lignes <- as.integer(readline(prompt = "Entrez le nombre de lignes de la matrice de contrôle B: "))
colonnes <- as.integer(readline(prompt = "Entrez le nombre de colonnes de la matrice de contrôle B: "))
if (lignes == nb_etats) {
break
} else {
cat("Le nombre de lignes de la matrice de contrôle doit être égal au nombre de lignes de la matrice d'état. Veuillez réessayer.\n")
}
}
cat("Entrez les éléments de la matrice de contrôle B ligne par ligne, séparés par des espaces:\n")
matrice <- matrix(NA, lignes, colonnes)
for (i in 1:lignes) {
ligne <- readline(prompt = paste("Ligne", i, ": "))
matrice[i, ] <- as.numeric(unlist(strsplit(ligne, " ")))
}
matrice
}
repeat {
lignes <- as.integer(readline(prompt = "Entrez le nombre de lignes de la matrice de contrôle B: "))
colonnes <- as.integer(readline(prompt = "Entrez le nombre de colonnes de la matrice de contrôle B: "))
if (lignes == nb_etats) {
break
} else {
cat("Le nombre de lignes de la matrice de contrôle doit être égal au nombre de lignes de la matrice d'état. Veuillez réessayer.\n")
}
}
cat("Entrez les éléments de la matrice de contrôle B ligne par ligne, séparés par des espaces:\n")
matrice <- matrix(NA, lignes, colonnes)
for (i in 1:lignes) {
ligne <- readline(prompt = paste("Ligne", i, ": "))
matrice[i, ] <- as.numeric(unlist(strsplit(ligne, " ")))
}
matrice <- matrix(NA, lignes, colonnes)
for (i in 1:lignes) {
ligne <- readline(prompt = paste("Ligne", i, ": "))
matrice[i, ] <- as.numeric(unlist(strsplit(ligne, " ")))
}
matrice
n <- nrow(A)
C <- B
#' @param A La matrice d'état.
#' @param B La matrice de contrôle.
#' @return Une matrice de contrôlabilité.
#' @export
#' @examples
#' \dontrun{
#' A <- matrix(c(0, 1, -2, -3), nrow = 2, byrow = TRUE)
#' B <- matrix(c(0, 1), nrow = 2, byrow = TRUE)
#' calculer_matrice_controllabilite(A, B)
#' }
calculer_matrice_controllabilite <- function(A, B) {
n <- nrow(A)
C <- B
puiss <- diag(n) # Initialisation de la matrice identité
for (i in 1:(n-1)) {
puiss <- puiss %*% A
C <- cbind(C, puiss %*% B)
}
return(C)
}
n <- nrow(A)
C <- B
#' @param A La matrice d'état.
#' @param B La matrice de contrôle.
#' @return Une matrice de contrôlabilité.
#' @export
#' @examples
#' \dontrun{
#' A <- matrix(c(0, 1, -2, -3), nrow = 2, byrow = TRUE)
#' B <- matrix(c(0, 1), nrow = 2, byrow = TRUE)
#' calculer_matrice_controllabilite(A, B)
#' }
calculer_matrice_controllabilite <- function(A, B) {
n <- nrow(A)
C <- B
puiss <- diag(n) # Initialisation de la matrice identité
for (i in 1:(n-1)) {
puiss <- puiss %*% A
C <- cbind(C, puiss %*% B)
}
return(C)
}
# Lire la matrice d'état A
A <- lire_matrice_etat()
# Lire la matrice de contrôle B
B <- lire_matrice_controle(nrow(A))
# Calculer la matrice de contrôlabilité
C <- calculer_matrice_controllabilite(A, B)
# Vérifier la contrôlabilité
is_controllable <- verifier_controllabilite(A, C)
# Vérifier la contrôlabilité
is_controllable <- verifier_controllabilite(A, C)
# Calculer la matrice de contrôlabilité
C <- calculer_matrice_controllabilite(A, B)
c
# Lire la matrice d'état A
A <- lire_matrice_etat()
# Lire la matrice d'état A
A <- lire_matrice_etat()
# Lire la matrice de contrôle B
B <- lire_matrice_controle(nrow(A))
# Vérifier la contrôlabilité
is_controllable <- verifier_controllabilite(A,Control)
#' @param A La matrice d'état.
#' @param Control La matrice de contrôlabilité.
#' @return TRUE si le système est contrôlable, FALSE sinon.
#' @export
#' @examples
#' \dontrun{
#' A <- matrix(c(0, 1, -2, -3), nrow = 2, byrow = TRUE)
#' C <- matrix(c(0, 1, 1, -3), nrow = 2, byrow = TRUE)
#' verifier_controllabilite(A, C)
#' }
verifier_controllabilite <- function(A, Control) {
rang_A <- qr(A)$rank
rang_C <- qr(Control)$rank
return(rang_C == rang_A)
}
rang_A <- qr(A)$rank
rang_C <- qr(Control)$rank
lire_matrice_controle <- function(nb_etats) {
repeat {
lignes <- as.integer(readline(prompt = "Entrez le nombre de lignes de la matrice de contrôle B: "))
colonnes <- as.integer(readline(prompt = "Entrez le nombre de colonnes de la matrice de contrôle B: "))
if (lignes == nb_etats) {
break
} else {
cat("Le nombre de lignes de la matrice de contrôle doit être égal au nombre de lignes de la matrice d'état. Veuillez réessayer.\n")
}
}
cat("Entrez les éléments de la matrice de contrôle B ligne par ligne, séparés par des espaces:\n")
matrice <- matrix(NA, lignes, colonnes)
for (i in 1:lignes) {
ligne <- readline(prompt = paste("Ligne", i, ": "))
matrice[i, ] <- as.numeric(unlist(strsplit(ligne, " ")))
}
matrice
}
repeat {
lignes <- as.integer(readline(prompt = "Entrez le nombre de lignes de la matrice de contrôle B: "))
colonnes <- as.integer(readline(prompt = "Entrez le nombre de colonnes de la matrice de contrôle B: "))
if (lignes == nb_etats) {
break
} else {
cat("Le nombre de lignes de la matrice de contrôle doit être égal au nombre de lignes de la matrice d'état. Veuillez réessayer.\n")
}
}
if (lignes == nb_etats) {
break
} else {
cat("Le nombre de lignes de la matrice de contrôle doit être égal au nombre de lignes de la matrice d'état. Veuillez réessayer.\n")
}
if (lignes == nb_etats) {
break
} else {
cat("Le nombre de lignes de la matrice de contrôle doit être égal au nombre de lignes de la matrice d'état. Veuillez réessayer.\n")
}
cat("Entrez les éléments de la matrice de contrôle B ligne par ligne, séparés par des espaces:\n")
matrice <- matrix(NA, lignes, colonnes)
for (i in 1:lignes) {
ligne <- readline(prompt = paste("Ligne", i, ": "))
matrice[i, ] <- as.numeric(unlist(strsplit(ligne, " ")))
}
#' @param A La matrice d'état.
#' @param B La matrice de contrôle.
#' @return Une matrice de contrôlabilité.
#' @export
#' @examples
#' \dontrun{
#' A <- matrix(c(0, 1, -2, -3), nrow = 2, byrow = TRUE)
#' B <- matrix(c(0, 1), nrow = 2, byrow = TRUE)
#' calculer_matrice_controllabilite(A, B)
#' }
calculer_matrice_controllabilite <- function(A, B) {
n <- nrow(A)
Control <- B
puiss <- diag(n) # Initialisation de la matrice identité
for (i in 1:(n-1)) {
puiss <- puiss %*% A
Control <- cbind(C, puiss %*% B)
}
C
}
n <- nrow(A)
Control <- B
puiss <- diag(n) # Initialisation de la matrice identité
for (i in 1:(n-1)) {
puiss <- puiss %*% A
Control <- cbind(C, puiss %*% B)
}
C
# Calculer la matrice de contrôlabilité
Control <- calculer_matrice_controllabilite(A, B)
# Vérifier la contrôlabilité
is_controllable <- verifier_controllabilite(A,Control)
# Afficher le résultat
if (is_controllable) {
cat("The system is controllable.\n")
} else {
cat("The system is not controllable.\n")
}
#' Calculer et vérifier la contrôlabilité
#'
#' Cette fonction lit les matrices d'état et de contrôle, calcule la matrice de contrôlabilité et vérifie si le système est contrôlable.
#'
#' @return Un message indiquant si le système est contrôlable.
#' @export
#' @examples
#' \dontrun{
#' kalman_criterion()
#' }
kalman_criterion <- function() {
# Lire la matrice d'état A
A <- lire_matrice_etat()
# Lire la matrice de contrôle B
B <- lire_matrice_controle(nrow(A))
# Calculer la matrice de contrôlabilité
Control <- calculer_matrice_controllabilite(A, B)
# Vérifier la contrôlabilité
is_controllable <- verifier_controllabilite(A,Control)
# Afficher le résultat
if (is_controllable) {
cat("The system is controllable.\n")
} else {
cat("The system is not controllable.\n")
}
}
# Lire la matrice d'état A
A <- lire_matrice_etat()
# Lire la matrice de contrôle B
B <- lire_matrice_controle(nrow(A))
# Calculer la matrice de contrôlabilité
Control <- calculer_matrice_controllabilite(A, B)
# Vérifier la contrôlabilité
is_controllable <- verifier_controllabilite(A,Control)
# Afficher le résultat
if (is_controllable) {
cat("The system is controllable.\n")
} else {
cat("The system is not controllable.\n")
}
# Calculer la matrice de contrôlabilité
Control <- calculer_matrice_controllabilite(A, B)
Control
# Calculer la matrice de contrôlabilité
Control <- calculer_matrice_controllabilite(A, B)
library(kalmanFilter)
library(Kalmancriterion)
library(kalmanCritereF)
library(KalmanFilter)
devtools::load_all(".")
library(KalmanFilter)
library(help="KalmanFilter")
library(help="KalmanFilter")
?kalman_criterion
library(help="ggplot2")
library(help="KalmanFilter")
?kalman_criterion
library(help="KalmanFilter")
library(help="KalmanFilter")
library(help="KalmanFilter")
library(help="CriterionKalman")
?kalman_criterion
?verify_controllability
?kalman_criterion
?verify_controllability
library(help="CriterionKalman")
?verify_controllability
?calculate_matrix_controllability
library(KalmanFilter)
library(CriterionKalman)
?calculate_matrix_controllability
